import math
import os
import time
import board
import pwmio
import busio
import digitalio
import pwmio
import analogio
import sdcardio
import storage

from lib import LSM6DSL
from lib import BMP280
from lib import GNSS
from lib import PCF8563
from lib import QMC5883L
from lib import Ra01S


################################### Setup BUTTON_LED
print("\t\t\t###\t\t\t\n")
print("Проверка кнопки и светодиода")

#Create button object
button           = digitalio.DigitalInOut(board.IO9)
button.direction = digitalio.Direction.INPUT
button.pull      = digitalio.Pull.UP

#Create led object
led = digitalio.DigitalInOut(board.IO8)
led.direction = digitalio.Direction.OUTPUT

################################### Work BUTTON_LED
print("Жмите кнопку в течении 3 секунд, светодиод дожен гореть")
start = False
i = 0
while True:
    if(not button.value):
        if(not start):
            print("Кнопка нажата!")
            start = True
        if(i<30):
            i+=1
        else:
            break
    elif(start):
        print("Кнопка отпущена раньше времени!")
        start = False
        i = 0
    led.value = not button.value
    time.sleep(0.1)
print("Проверка кнопки и светодиода: ЗАВЕРШЕНА")


################################### Setup BUZZER
print("\t\t\t###\t\t\t\n")
print("Проверка бузера")

frequency_buzzer = 1000 # In Hz

#Create buzzer_pin object
buzzer_pin = board.IO4
#Create buzzer object
buzzer = pwmio.PWMOut(pin=buzzer_pin, duty_cycle=0, frequency=frequency_buzzer)

#Turn On buzzer
def BuzzerOn():
    buzzer.duty_cycle = 32768
#Turn Off buzzer
def BuzzerOff():
    buzzer.duty_cycle = 0

################################### Work BUZZER
for i in range(0,5):
    time.sleep(0.5)
    BuzzerOn()
    time.sleep(0.5)
    BuzzerOff()
print("Проверка бузера: ЗАВЕРШЕНА")


################################### Setup   MUX
print("\t\t\t###\t\t\t\n")
print(f"Проверка MUX")

#Create mux_sources objects
mux_s0           = digitalio.DigitalInOut(board.IO46)
mux_s0.direction = digitalio.Direction.OUTPUT
mux_s0.value     = False

mux_s1           = digitalio.DigitalInOut(board.IO0)
mux_s1.direction = digitalio.Direction.OUTPUT
mux_s1.value     = False

mux_s2           = digitalio.DigitalInOut(board.IO39)
mux_s2.direction = digitalio.Direction.OUTPUT
mux_s2.value     = False

#Select Line
def muxSelectLine(line):
    global mux_s0,mux_s1,mux_s2
    if(line<0 or line>7):
        return; 
    mux_s2.value = (int(line) >> 2) & 1
    mux_s1.value = (int(line) >> 1) & 1
    mux_s0.value = (int(line) >> 0) & 1

#default state - analog input
mux_inout        = analogio.AnalogIn(board.IO1)

# Toogle mux2In, (!) Line 1 and 2 have pull-down 10k, Line 3-7 nothing
def mux2In():
    global mux_inout
    mux_inout.deinit()
    mux_inout                   = digitalio.DigitalInOut(board.IO1)
    mux_inout.direction         = digitalio.Direction.INPUT

# Toogle mux2In, reference_voltage = 3.3V,(0-65535, 16-bit), Line 0 have res div (k=0.5)
def mux2Analog():
    global mux_inout
    mux_inout.deinit()
    mux_inout                   = analogio.AnalogIn(board.IO1)

# Toogle mux2Out
def mux2Out():
    global mux_inout
    mux_inout.deinit()
    mux_inout                   = digitalio.DigitalInOut(board.IO1)
    mux_inout.direction         = digitalio.Direction.OUTPUT

################################### Work MUX
#Switch pin mode
mux2Analog()
#Select Line 
muxSelectLine(0)

#Calculate
raw_bit  = mux_inout.value
percent  = raw_bit/65535.0
raw_volt = percent*mux_inout.reference_voltage
volt     = raw_volt*2.0
print(f"Показания аккумулятора с MUX: {raw_bit} lsb, Вход %: {percent}, Чистое напряжение: {raw_volt}, С учетом делителя: {volt}")
print(f"Проверка MUX : ЗАВЕРШЕНА")

################################### Setup DC Motor
print("\t\t\t###\t\t\t\n")
print(f"Проверка Мотора")

#Create xIN1_PWM_pin object
xIN1_PWM_pin  = board.IO21
#Create xIN2_GPIO_pin object
xIN2_GPIO_pin = board.IO47

#Create xIN1 object
xIN1 = pwmio.PWMOut(pin=xIN1_PWM_pin, duty_cycle=0, frequency=50)

#Create xIN2 object
xIN2           = digitalio.DigitalInOut(xIN2_GPIO_pin)
xIN2.direction = digitalio.Direction.OUTPUT

#DC motor speed control -100 ... 100 %
def DCMotorSetSpeed(speed):
    #clamp
    if(speed < -100):   
        speed = -100
    if(speed > 100):
        speed = 100
    
    #"Clear" duty cycle
    duty = abs(speed) * 65535.0/100.0

    #Inversion if reverse 
    duty = (65535.0-duty) if speed < 0 else duty
    xIN2.value = True if speed < 0 else False

    xIN1.duty_cycle = int(duty)

################################### Work  DC Motor
#Start point
speed = 0
dir   = 1

print("Вращаем мотором, в обе стороны")
while True:
    time.sleep(0.05)
    #Change direction
    if(dir == 1  and speed == 100):
        dir = -1
    if(dir == -1 and speed == -100):
        dir = 1
        DCMotorSetSpeed(0)
        break

    #Change speed
    speed += dir
    DCMotorSetSpeed(speed)
print(f"Проверка Мотора : ЗАВЕРШЕНА")


################################### Setup Servos
print("\t\t\t###\t\t\t\n")
print(f"Проверка Servos")

min_angle = 0
max_angle = 180

min_width = 1640
max_width = 7872

#Create PWM1_pin object
PWM1_pin = board.IO48
#Create PWM2_pin object
PWM2_pin = board.IO45

#Create Servo1 object
Servo1 = pwmio.PWMOut(pin=PWM1_pin, duty_cycle=min_width, frequency=50)
#Create Servo2 object
Servo2 = pwmio.PWMOut(pin=PWM2_pin, duty_cycle=min_width, frequency=50)

#Similar to arduino Servo.write() 
def ServoSetAngle(servo, angle):
    #Clamp
    if(angle < min_angle):
        angle = min_angle
    if(angle > max_angle):
        angle = max_angle
    
    #Similar to map() 
    duty = (angle - min_angle) * (max_width - min_width) / (max_angle - min_angle) + min_width
    servo.duty_cycle = int(duty)

################################### Work Servos
print("Вращаем сервами, в обе стороны")
for i in range(0,5):
    time.sleep(1)
    ServoSetAngle(Servo1, 0)
    ServoSetAngle(Servo2, 180)
    time.sleep(1)
    ServoSetAngle(Servo1, 180)
    ServoSetAngle(Servo2, 0)

print(f"Проверка Servos : ЗАВЕРШЕНА")


################################### Setup GNSS
print("\t\t\t###\t\t\t\n")
print(f"Проверка GNSS (без ожидания спутников)")

#Create gnss_uart module object
gnss_uart = busio.UART(board.IO17, board.IO18, baudrate=9600, timeout=10)

#Create gnss module object
gnss = GNSS.GPS(gnss_uart, debug=False)
gnss.send_command(b'PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0')
# Set update rate to once a second (default - 1hz)
gnss.send_command(b"PMTK220,1000")

################################### Work GNSS
print( f"GNSS, 5 строк : \n{gnss_uart.readline()}\n\
{gnss_uart.readline()}\n\
{gnss_uart.readline()}\n\
{gnss_uart.readline()}\n\
{gnss_uart.readline()}")
print(f"Проверка GNSS : ЗАВЕРШЕНА")
time.sleep(2)

################################### Setup PCF8563
print("\t\t\t###\t\t\t\n")
print(f"Проверка PCF8563")

#Create i2c module object
i2c1_module = busio.I2C(scl=board.IO2, sda=board.IO3)
#Create PCF8563 object
PCF8563     = PCF8563.PCF8563_I2C(i2c1_module, PCF8563.PCF8563_DEFAULT_ADDRESS)

#Setup Date {Year, Month, Day}
PCF8563.setDate(2023,01,01)
#Setup Time {Hour, Minute, Second}
PCF8563.setTime(00,00,00)

################################### Work PCF8563
for i in range(0,10):
    Year, Month, Day     = PCF8563.getDate()
    Hour, Minute, Second = PCF8563.getTime()

    print(f" Год: {Year}, Месяц: {Month}, День: {Day}, Час: {Hour}, Минута: {Minute}, Секунда: {Second}")

    time.sleep(0.5)
print(f"Проверка PCF8563 : ЗАВЕРШЕНА")

################################### Setup BMP280
print("\t\t\t###\t\t\t\n")
print(f"Проверка BMP280")

#Create i2c module object
#i2c1_module = busio.I2C(scl=board.IO2, sda=board.IO3)
#Create bmp280 object
bmp280      = BMP280.Adafruit_BMP280_I2C(i2c1_module, BMP280._BMP280_ADDRESS)
#Set zero pressure
bmp280.sea_level_pressure = 101.325 #kPa

################################### Work BMP280
#Get data from device
for i in range(0,10):
    temp    = bmp280.temperature()
    press   = bmp280.pressure()
    alt     = bmp280.altitude()
    time.sleep(0.1)

all_ok = "все хорошо"
if(temp<-20 or temp>40 or press<90 or press>130 or alt<-200 or alt>500):
    all_ok = "не работает"

print(f"Показания - температура: {temp} град, Давление: {press} кПа, Высота: {alt} м.; Результат - {all_ok}")
print(f"Проверка BMP280 : ЗАВЕРШЕНА")

################################### Setup LSM6DSL
print("\t\t\t###\t\t\t\n")
print(f"Проверка LSM6DSL")

#Create i2c module object
#i2c1_module = busio.I2C(scl=board.IO2, sda=board.IO3)
#Create lsm6dsl object
lsm6dsl     = LSM6DSL.LSM6DSL_I2C(i2c1_module, LSM6DSL.LSM6DSL_DEFAULT_ADDRESS)

################################### Work LSM6DSL
#Get data from device
for i in range(0,10):
    acc = lsm6dsl.acceleration()
    gyro = lsm6dsl.gyro()
    temp = lsm6dsl.temperature()
    time.sleep(0.5)

acc_m = math.sqrt(acc[0]*acc[0]+ acc[1]*acc[1]+ acc[2]*acc[2])
gyro_m = math.sqrt(gyro[0]*gyro[0]+ gyro[1]*gyro[1]+ gyro[2]*gyro[2])

all_ok = "все хорошо"
if(temp<-20 or temp>40 or acc_m<-15 or acc_m>15 or gyro_m<-50 or gyro_m>50):
    all_ok = "не работает"

print(f"Показания - температура: {temp} град, Ускорение: {acc_m} м/с, Угл. скорость: {gyro_m} град/с; Результат - {all_ok}")
print(f"Проверка LSM6DSL : ЗАВЕРШЕНА")

################################### Setup QMC5883l
print("\t\t\t###\t\t\t\n")
print(f"Проверка QMC5883l")

#Create i2c module object
#i2c1_module = busio.I2C(scl=board.IO2, sda=board.IO3)
#Create qmc5883l object
qmc5883l     = QMC5883L.QMC5883L_I2C(i2c1_module, QMC5883L.QMC5883L_DEFAULT_ADDRESS)

################################### Work QMC5883l
for i in range(0,10):
    #Get data from device
    temp = qmc5883l.temperature()   #need offset
    mag = qmc5883l.magnetometer()
    time.sleep(0.5)

    mag_m = math.sqrt(mag[0]*mag[0]+ mag[1]*mag[1]+ mag[2]*mag[2])

all_ok = "все хорошо"
if(temp<-10 or temp>10):
    all_ok = "не работает"

print(f"Показания - температура(без смещения): {temp} град,  Вектор магнитного поля: {mag_m} мТ; Результат - {all_ok}")
print(f"Проверка QMC5883l : ЗАВЕРШЕНА")


################################### Setup SDCard
print("\t\t\t###\t\t\t\n")
print(f"Проверка SDCard")

my_file = "test.txt"

#Create spi module object
spi0_module     = busio.SPI(clock=board.IO12, MOSI=board.IO11, MISO=board.IO13)
#Create cs object
sd_card_cs_pin  = board.IO15

#Create SDCard object
spi0_speed = 2000000
sd_card = sdcardio.SDCard(spi0_module, sd_card_cs_pin, spi0_speed)
#Create FileSystem object
vfs     = storage.VfsFat(sd_card)
#Mount FileSystem
storage.mount(vfs, '/sd')

################################### Work SDCard
print("Записываем файл")
#Open File to write (append mode)
f = open("/sd/"+my_file, "a")
#Write (next line = "\r\n")
f.write("Hello, world!\r\n")
f.close()

print("Читаем файл")
#Open File to read 
f = open("/sd/"+my_file, "r")
#Read All ((!)Only 5-6 MB RAM available(!))
contents = f.read()
print(contents)
f.close()

storage.umount('/sd')

print(f"Проверка SDCard : ЗАВЕРШЕНА")

################################### Setup Ra01S
print("\t\t\t###\t\t\t\n")
print(f"Проверка Ra01S")

# #Create SDCard_cs_pin object
# SDCard_cs_pin  = board.IO15

# #Create SDCard_cs object , (!) before init spi
# SDCard_cs = digitalio.DigitalInOut(SDCard_cs_pin)
# SDCard_cs.direction = digitalio.Direction.OUTPUT
# SDCard_cs.value = True

#Create spi module object
spi0_speed = 2000000
#spi0_module     = busio.SPI(clock=board.IO12, MOSI=board.IO11, MISO=board.IO13)

#Create pins object
Ra01S_cs_pin    = board.IO7
Ra01S_nRst_pin  = board.IO6
Ra01S_nInt_pin  = board.IO5

#Create Ra01S_cs object
Ra01S_cs = digitalio.DigitalInOut(Ra01S_cs_pin)
Ra01S_cs.direction = digitalio.Direction.OUTPUT
Ra01S_cs.value = True

#Create Ra01S_nRst object
Ra01S_nRst = digitalio.DigitalInOut(Ra01S_nRst_pin)
Ra01S_nRst.direction = digitalio.Direction.OUTPUT
Ra01S_nRst.value = True

#Create Ra01S_nInt object
Ra01S_nInt = digitalio.DigitalInOut(Ra01S_nInt_pin)
Ra01S_nInt.direction = digitalio.Direction.INPUT

#Create Ra01S object
Ra01S     = Ra01S.Ra01S_SPI(spi0_module, Ra01S_cs, Ra01S_nRst, Ra01S_nInt, spi0_speed)

#First init and turn on
Ra01S.on()

#Set power mode
Ra01S.SetLowPower()
#Ra01S.SetLowPower()

#Select channel 0-6
Ra01S.SetChannel(0) 

################################### Work Ra01S
print("Отсылаем 5 пакетов в космос...")
for i in range(0,5):
    Ra01S.SendS("Hello world!\n")
    time.sleep(0.5)
print(f"Проверка Ra01S : ЗАВЕРШЕНА")
